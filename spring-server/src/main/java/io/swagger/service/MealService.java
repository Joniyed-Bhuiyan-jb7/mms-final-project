package io.swagger.service;import io.swagger.exceptions.InvalidInputException;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.Meal;import io.swagger.repository.MealRepository;import io.swagger.repository.MemberManagerRepository;import org.springframework.stereotype.Service;import sun.security.x509.InvalidityDateExtension;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;@Servicepublic class MealService {    private MealRepository mealRepository;    private MemberManagerRepository memberManagerRepository;    public MealService(MealRepository mealRepository, MemberManagerRepository memberManagerRepository) {        this.mealRepository = mealRepository;        this.memberManagerRepository = memberManagerRepository;    }    public Meal addMeal(Meal meal) throws ResourceDoesNotExistException, ResourceAlreadyExistException {        if(!mealRepository.exists(meal.getMealNo())){            if(memberManagerRepository.exists(meal.getUsername())){                return mealRepository.save(meal);            }else{                throw new ResourceDoesNotExistException("user not available..");            }        }else{            throw new ResourceAlreadyExistException("already exist..");        }    }    public List<Meal> getMeal(String username, LocalDate date) throws ResourceDoesNotExistException {        if(memberManagerRepository.exists(username)){            List<Meal> mealList = mealRepository.getMeal(username, date);            if(!mealList.isEmpty()){                return mealList;            }else{                throw new ResourceDoesNotExistException("empty");            }        }else{            throw new ResourceDoesNotExistException("user not found");        }    }    public Meal updateMeal(long mealNo, Meal meal) throws ResourceDoesNotExistException {        if(mealRepository.exists(mealNo)){            Meal oldMeal = mealRepository.findOne(mealNo);            meal.setMealNo(mealNo);            meal.setUsername(oldMeal.getUsername());            return mealRepository.save(meal);        }else{            throw new ResourceDoesNotExistException("information not available..");        }    }    public List<Meal> getAllMeal() throws ResourceDoesNotExistException {        List<Meal> mealList = new ArrayList<>();        mealRepository.findAll().forEach(mealList::add);        if(!mealList.isEmpty()){            return mealList;        }else{            throw new ResourceDoesNotExistException("empty");        }    }    public void deleteMeal(long mealNo) throws ResourceDoesNotExistException {        if(mealRepository.exists(mealNo)){            mealRepository.delete(mealNo);        }else{            throw new ResourceDoesNotExistException("no such a meal information");        }    }    public List<Meal> getMonthMeal(int month, int year) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<Meal> monthMeal = mealRepository.getMonthMeal(start, end);            if (!monthMeal.isEmpty()) {                return monthMeal;            } else {                throw new ResourceDoesNotExistException("no meal availanle on this month");            }        }else throw new InvalidInputException("month should be <=12");    }    public double getSumOfMonthMeal(int month, int year) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<Meal> monthMeal = mealRepository.getMonthMeal(start, end);            if (!monthMeal.isEmpty()) {                return mealRepository.getSumOfMonthMeal(start, end);            } else {                throw new ResourceDoesNotExistException("no meal availanle on this month");            }        }else throw new InvalidInputException("month should be <=12");    }    public List<Meal> getUserMonthMeal(int month, int year, String username) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<Meal> monthMeal = mealRepository.getUserMonthMeal(start, end, username);            if (memberManagerRepository.exists(username)) {                if (!monthMeal.isEmpty()) {                    return monthMeal;                } else {                    throw new ResourceDoesNotExistException("no meal availanle on this month");                }            } else {                throw new ResourceDoesNotExistException("member not exist..");            }        }else throw new InvalidInputException("month should be <=12");    }    public double getSumOfUserMonthMeal(int month, int year, String username) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<Meal> monthMeal = mealRepository.getUserMonthMeal(start, end, username);            if (memberManagerRepository.exists(username)) {                if (!monthMeal.isEmpty()) {                    return mealRepository.getSumOfUserMonthMeal(start, end, username);                } else {                    throw new ResourceDoesNotExistException("no meal availanle on this month");                }            } else {                throw new ResourceDoesNotExistException("member not exist..");            }        }else throw new InvalidInputException("month should be <=12");    }}