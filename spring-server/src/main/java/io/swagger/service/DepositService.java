package io.swagger.service;import io.swagger.exceptions.InvalidInputException;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.DepositInformation;import io.swagger.repository.DepositRepository;import io.swagger.repository.MemberManagerRepository;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.List;@Servicepublic class DepositService {    private DepositRepository depositRepository;    private MemberManagerRepository memberManagerRepository;    public DepositService(DepositRepository depositRepository, MemberManagerRepository memberManagerRepository) {        this.depositRepository = depositRepository;        this.memberManagerRepository = memberManagerRepository;    }    public DepositInformation addDeposit(DepositInformation depositInformation) throws ResourceAlreadyExistException, ResourceDoesNotExistException {        if(!depositRepository.exists(depositInformation.getDepositNo())){            if(memberManagerRepository.exists(depositInformation.getUsername())){                return depositRepository.save(depositInformation);            }else{                throw new ResourceDoesNotExistException("user not found");            }        }else{            throw new ResourceAlreadyExistException(depositInformation.getDepositNo()+"");        }    }    public void deleteDeposit(long depositNo) throws ResourceDoesNotExistException {        if(depositRepository.exists(depositNo)){            depositRepository.delete(depositNo);        }else{            throw new ResourceDoesNotExistException(depositNo+"");        }    }    public DepositInformation updateDepositInformation(long depositId, DepositInformation depositInformation) throws ResourceDoesNotExistException {        if(depositRepository.exists(depositId)){            DepositInformation oldDepositInformation = depositRepository.findOne(depositId);            depositInformation.setDepositNo(depositId);            depositInformation.setUsername(oldDepositInformation.getUsername());            return depositRepository.save(depositInformation);        }else{            throw new ResourceDoesNotExistException("deposit information not found..");        }    }    public List<DepositInformation> getMonthDepositList(int month, int year) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<DepositInformation> monthDepositList = depositRepository.getMonthDepositList(start, end);            if (!monthDepositList.isEmpty()) {                return monthDepositList;            } else {                throw new ResourceDoesNotExistException("no information available between this date range..");            }        }else{            throw new InvalidInputException("month should be less then or equal to 12");        }    }    public Double getSumOfMonthDepositList(int month, int year) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<DepositInformation> monthDepositList = depositRepository.getMonthDepositList(start, end);            if (!monthDepositList.isEmpty()) {                return depositRepository.getSumOfMonthDepositList(start, end);            } else {                throw new ResourceDoesNotExistException("empty db");            }        }else throw new InvalidInputException("month should be <=12");    }    public List<DepositInformation> getMonthDepositForMember(int month, int year, String username) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<DepositInformation> monthDepositList = depositRepository.getMonthDepositOfMember(start, end, username);            if (!monthDepositList.isEmpty()) {                return monthDepositList;            } else {                throw new ResourceDoesNotExistException("no deposit exist for this user..");            }        }else throw new InvalidInputException("month should be <=12");    }    public Double getSumOfMonthDepositForMember(int month, int year, String username) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            List<DepositInformation> monthDepositList = depositRepository.getMonthDepositOfMember(start, end, username);            if (!monthDepositList.isEmpty()) {                return depositRepository.getSumOfMonthDepositOfMember(start, end, username);            } else {                throw new ResourceDoesNotExistException("no deposit exist for this user..");            }        }else throw new InvalidInputException("month shoud be <=12");    }}