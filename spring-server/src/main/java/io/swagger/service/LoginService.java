package io.swagger.service;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.LoginInformation;import io.swagger.model.UserWithRole;import io.swagger.repository.LoginRepository;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class LoginService {    private LoginRepository loginRepository;    public LoginService(LoginRepository loginRepository) {        this.loginRepository = loginRepository;    }    public LoginInformation saveLoginInformation(LoginInformation loginInformation) throws ResourceAlreadyExistException {        if(!loginRepository.exists(loginInformation.getUsername())){            return loginRepository.save(loginInformation);        }else{            throw new ResourceAlreadyExistException(loginInformation.getUsername());        }    }    public LoginInformation getLoginInformation(String username) throws ResourceDoesNotExistException {        if(loginRepository.exists(username)){            return loginRepository.findOne(username);        }else{            throw new ResourceDoesNotExistException(username);        }    }    public LoginInformation updateLoginInformation(String username, LoginInformation loginInformation) throws ResourceDoesNotExistException {        if(loginRepository.exists(username)){            loginInformation.setUsername(username);            return loginRepository.save(loginInformation);        }else{            throw new ResourceDoesNotExistException(username);        }    }    public void deleteLoginInformation(String username) throws ResourceDoesNotExistException {        if(loginRepository.exists(username)){            loginRepository.delete(username);        }else{            throw new ResourceDoesNotExistException(username);        }    }    public void deleteAll() throws ResourceDoesNotExistException {        List<LoginInformation> informationList = new ArrayList<>();        loginRepository.findAll().forEach(informationList::add);        if(!informationList.isEmpty()){            loginRepository.deleteAll();        }else{            throw new ResourceDoesNotExistException("empty db");        }    }    public List<UserWithRole> getUerAndRole() throws ResourceDoesNotExistException {        List<LoginInformation> loginInformationList = new ArrayList<>();        List<UserWithRole> userWithRoleList = new ArrayList<>();        loginRepository.findAll().forEach(loginInformationList::add);        loginInformationList.forEach(loginInformation -> {            userWithRoleList.add(new UserWithRole(loginInformation.getUsername(),loginInformation.getRole()));        });        if(!userWithRoleList.isEmpty()) return userWithRoleList;        else throw new ResourceDoesNotExistException("empty");    }}