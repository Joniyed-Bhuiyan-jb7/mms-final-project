package io.swagger.service;import io.swagger.exceptions.InvalidInputException;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.DailyActivities;import io.swagger.repository.BazarRepository;import io.swagger.repository.DailyActivitiesRepository;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.List;import java.util.concurrent.atomic.AtomicReference;@Servicepublic class DailyActivitiesService {    private DailyActivitiesRepository dailyActivitiesRepository;    private BazarRepository bazarRepository;    public DailyActivitiesService(DailyActivitiesRepository dailyActivitiesRepository, BazarRepository bazarRepository) {        this.dailyActivitiesRepository = dailyActivitiesRepository;        this.bazarRepository = bazarRepository;    }    public DailyActivities addDailyActivities(DailyActivities dailyActivities) throws ResourceAlreadyExistException {        AtomicReference<Double> totalCost= new AtomicReference<>((double) 0);        dailyActivities.getBazar().forEach(bazar -> {            bazarRepository.save(bazar);            totalCost.set(totalCost.get()+(bazar.getUnit()*bazar.getCostPerUnit()));        });        dailyActivities.setTotalCost(totalCost.get());        if(!dailyActivitiesRepository.exists(dailyActivities.getSerialNo())){            return dailyActivitiesRepository.save(dailyActivities);        }else{            throw new ResourceAlreadyExistException("this serial already exist..");        }    }    public List<DailyActivities> getAllForMonth(int month, int year) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12){            LocalDate start = LocalDate.of(year,month,1);            LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());            List<DailyActivities> monthBazarList = dailyActivitiesRepository.getMonthBazarList(start, end);            if(!monthBazarList.isEmpty()){                return monthBazarList;            }else throw new ResourceDoesNotExistException("empty");        }else throw new InvalidInputException("month should be <=12");    }    public double getSumOfAllForMonth(int month, int year) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12){            LocalDate start = LocalDate.of(year,month,1);            LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());            List<DailyActivities> monthBazarList = dailyActivitiesRepository.getMonthBazarList(start, end);            if(!monthBazarList.isEmpty()){                return dailyActivitiesRepository.getSumOfMonthBazarList(start,end);            }else throw new ResourceDoesNotExistException("empty");        }else throw new InvalidInputException("month should be <=12");    }    public List<DailyActivities> getDailyActivitiesOfUserForMonth(int month, int year, String username) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12){            LocalDate start = LocalDate.of(year,month,1);            LocalDate end = LocalDate.of(year,month,start.lengthOfMonth());            List<DailyActivities> monthBazarList = dailyActivitiesRepository.getUserMonthBazarList(start, end,username);            if(!monthBazarList.isEmpty()){                return monthBazarList;            }else throw new ResourceDoesNotExistException("empty");        }else throw new InvalidInputException("month should be <=12");    }    public DailyActivities updateDailyActivities(long activityNo,DailyActivities dailyActivities) throws ResourceDoesNotExistException {        if(dailyActivitiesRepository.exists(activityNo)){            AtomicReference<Double> totalCost= new AtomicReference<>((double) 0);            dailyActivities.getBazar().forEach(bazar -> {                bazarRepository.save(bazar);                totalCost.set(totalCost.get()+(bazar.getUnit()*bazar.getCostPerUnit()));            });            dailyActivities.setTotalCost(totalCost.get());            dailyActivities.setSerialNo(activityNo);            return dailyActivitiesRepository.save(dailyActivities);        }else{            throw new ResourceDoesNotExistException("activity not found");        }    }    public void deleteActivity(long activityNo) throws ResourceDoesNotExistException {        if(dailyActivitiesRepository.exists(activityNo)){            DailyActivities oldActivity = dailyActivitiesRepository.findOne(activityNo);            dailyActivitiesRepository.delete(activityNo);            oldActivity.getBazar().forEach(bazar -> {                bazarRepository.delete(bazar);            });            System.out.println("done");        }else{            throw new ResourceDoesNotExistException("activity details not available");        }    }}