package io.swagger.service;import io.swagger.exceptions.InvalidInputException;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.Evaluation;import io.swagger.model.LoginInformation;import io.swagger.model.Role;import io.swagger.repository.EvaluationRepository;import io.swagger.repository.LoginRepository;import io.swagger.repository.MemberManagerRepository;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.List;@Servicepublic class EvaluationService {    private EvaluationRepository evaluationRepository;    private LoginRepository loginRepository;    private MemberManagerRepository memberManagerRepository;    public EvaluationService(EvaluationRepository evaluationRepository, LoginRepository loginRepository, MemberManagerRepository memberManagerRepository) {        this.evaluationRepository = evaluationRepository;        this.loginRepository = loginRepository;        this.memberManagerRepository = memberManagerRepository;    }    public Evaluation addEvaluation(Evaluation evaluation) throws ResourceAlreadyExistException, ResourceDoesNotExistException {        LoginInformation managerCheck = loginRepository.findOne(evaluation.getManagerUserName());        if(managerCheck!=null) {            if (memberManagerRepository.exists(evaluation.getUsername()) && managerCheck.getRole().equals(Role.Manager)) {                if (!evaluationRepository.exists(evaluation.getEvaluationNo())) {                    return evaluationRepository.save(evaluation);                } else {                    throw new ResourceAlreadyExistException("already exist...");                }            } else {                throw new ResourceDoesNotExistException("user not exist..");            }        }else{            throw new ResourceDoesNotExistException("manager not found");        }    }    public double getAvgEvaluation(int month, int year, String username) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            LoginInformation managerInformation = loginRepository.findOne(username);            if (managerInformation != null && managerInformation.getRole().equals(Role.Manager)) {                List<Evaluation> managerMonthEvaluation = evaluationRepository.getManagerMonthEvaluation(start, end, username);                if (!managerMonthEvaluation.isEmpty()) {                    return evaluationRepository.getAvgEvaluationForManager(username, start, end);                } else {                    throw new ResourceDoesNotExistException("no information");                }            } else {                throw new ResourceDoesNotExistException("invalid manager...");            }        }else throw new InvalidInputException("month shoud be <=12");    }    public List<Evaluation> getMonthEvaluation(int month, int year, String managerUserName) throws ResourceDoesNotExistException, InvalidInputException {        if(month<=12) {            LocalDate start = LocalDate.of(year, month, 1);            LocalDate end = LocalDate.of(year, month, start.lengthOfMonth());            LoginInformation managerInformation = loginRepository.findOne(managerUserName);            if (managerInformation != null && managerInformation.getRole().equals(Role.Manager)) {                List<Evaluation> managerMonthEvaluation = evaluationRepository.getManagerMonthEvaluation(start, end, managerUserName);                if (!managerMonthEvaluation.isEmpty()) {                    return evaluationRepository.getManagerMonthEvaluation(start, end, managerUserName);                } else {                    throw new ResourceDoesNotExistException("no information");                }            } else {                throw new ResourceDoesNotExistException("invalid manager...");            }        }else throw new InvalidInputException("month should be <=12");    }}