package io.swagger.service;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.Address;import io.swagger.model.MemberManager;import io.swagger.model.Name;import io.swagger.model.Phone;import org.junit.Test;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.Assertions;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.time.LocalDate;@RunWith(SpringRunner.class)@SpringBootTestpublic class MemberManagerServiceTest {    @Autowired    private MemberManagerService memberManagerService;    @Autowired    @AfterEach    public void deleteAll(){        memberManagerService.deleteAll();    }    @Test    public void saveUser() {        try {            MemberManager user = new MemberManager();            user.setUsername("test");            user.setName(new Name("joniyed", "Bhuiyan"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("jb@gmail.com");            MemberManager savedUser = memberManagerService.saveUser(user);            System.out.println("Before Save : "+user+"\n"+"After save: "+savedUser);            Assertions.assertEquals(user.getUsername(),savedUser.getUsername());            Assertions.assertEquals(user.getName(),savedUser.getName());            Assertions.assertEquals(user.getAddress(),savedUser.getAddress());            Assertions.assertEquals(user.getPhone(),savedUser.getPhone());            Assertions.assertEquals(user.getEmail(),savedUser.getEmail());            Assertions.assertEquals(user.getLocalDate(),savedUser.getLocalDate());        }catch (ResourceAlreadyExistException e){            System.out.println("error");        }    }    @Test    public void getAllUser() {        try {            MemberManager user = new MemberManager();            user.setUsername("test--1");            user.setName(new Name("joniyed", "Bhuiyan"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("jb@gmail.com");            memberManagerService.saveUser(user);            user.setUsername("test--2");            user.setName(new Name("Nahidul", "Islam"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("nahid@gmail.com");            memberManagerService.saveUser(user);            user.setUsername("test--3");            user.setName(new Name("Mahabub", "Shazib"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("sazib@gmail.com");            memberManagerService.saveUser(user);            System.out.println("\nUser from Databases..");            memberManagerService.getAllUser().forEach(System.out::println);        } catch (ResourceDoesNotExistException | ResourceAlreadyExistException e) {            e.printStackTrace();        }    }    @Test    public void update() {        try {            MemberManager user = new MemberManager();            user.setUsername("test");            user.setName(new Name("joniyed", "Bhuiyan"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("jb@gmail.com");            MemberManager savedUser = memberManagerService.saveUser(user);            System.out.println("Before update: \n"+savedUser);            user.setName(new Name("Nahidul","Islam"));            user.setEmail("nahidul@gmail.com");            MemberManager updatedUser = memberManagerService.update("test", user);            System.out.println("After Update: \n"+updatedUser);            Assertions.assertEquals(user.getUsername(),updatedUser.getUsername());            Assertions.assertEquals(user.getName(),updatedUser.getName());            Assertions.assertEquals(user.getEmail(),updatedUser.getEmail());        } catch (ResourceAlreadyExistException | ResourceDoesNotExistException e) {            e.printStackTrace();        }    }    @Test    public void deleteUser() {        try {            MemberManager user = new MemberManager();            user.setUsername("test--1");            user.setName(new Name("joniyed", "Bhuiyan"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("jb@gmail.com");            memberManagerService.saveUser(user);            user.setUsername("test--2");            user.setName(new Name("Nahidul", "Islam"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("nahid@gmail.com");            memberManagerService.saveUser(user);            memberManagerService.getAllUser().forEach(System.out::println);            memberManagerService.deleteUser("test--2");            System.out.println("After delete : ");            memberManagerService.getAllUser().forEach(System.out::println);            Assertions.assertEquals(1,memberManagerService.getAllUser().size());        }catch (ResourceAlreadyExistException | ResourceDoesNotExistException e){            e.printStackTrace();        }    }    @Test    public void getSingleUser() {        try {            MemberManager user = new MemberManager();            user.setUsername("test");            user.setName(new Name("joniyed", "Bhuiyan"));            user.setAddress(new Address("Village", "thana", "District"));            user.setPhone(new Phone("+880", 013));            user.setLocalDate(LocalDate.now());            user.setEmail("jb@gmail.com");            memberManagerService.saveUser(user);            System.out.println("Saved User: "+user);            MemberManager singleUser = memberManagerService.getSingleUser(user.getUsername());            System.out.println("Get user from DB: "+singleUser);            Assertions.assertEquals(user.getUsername(),singleUser.getUsername());            Assertions.assertEquals(user.getName(),singleUser.getName());            Assertions.assertEquals(user.getAddress(),singleUser.getAddress());            Assertions.assertEquals(user.getPhone(),singleUser.getPhone());            Assertions.assertEquals(user.getEmail(),singleUser.getEmail());            Assertions.assertEquals(user.getLocalDate(),singleUser.getLocalDate());        }catch (ResourceAlreadyExistException | ResourceDoesNotExistException e){            e.printStackTrace();        }    }}