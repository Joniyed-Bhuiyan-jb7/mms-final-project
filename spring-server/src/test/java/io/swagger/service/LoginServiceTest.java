package io.swagger.service;import io.swagger.exceptions.ResourceAlreadyExistException;import io.swagger.exceptions.ResourceDoesNotExistException;import io.swagger.model.LoginInformation;import io.swagger.model.Role;import io.swagger.repository.LoginRepository;import org.junit.Test;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class LoginServiceTest {    @Autowired    private LoginService loginService;    @Autowired    private LoginRepository loginRepository;    @Autowired    @BeforeEach    public void deleteAll(){        try {            loginService.deleteAll();        } catch (ResourceDoesNotExistException e) {            e.printStackTrace();        }    }    @Test    public void saveLoginInformation() {        try {            LoginInformation loginInformation = new LoginInformation();            loginInformation.setUsername("test--1");            loginInformation.setPassword("test12345");            loginInformation.setRole(Role.Admin);            System.out.println(loginInformation);            LoginInformation savedloginInformation = loginService.saveLoginInformation(loginInformation);            System.out.println("saved login information: \n"+savedloginInformation);            Assertions.assertEquals(loginInformation.getUsername(),savedloginInformation.getUsername());            Assertions.assertEquals(loginInformation.getPassword(),savedloginInformation.getPassword());            Assertions.assertEquals(loginInformation.getRole(),savedloginInformation.getRole());        }catch (ResourceAlreadyExistException e){            e.printStackTrace();        }    }    @Test    public void getLoginInformation() {        try {            LoginInformation loginInformation = new LoginInformation();            loginInformation.setUsername("test--1");            loginInformation.setPassword("test12345");            loginInformation.setRole(Role.Admin);            System.out.println(loginInformation);            loginService.saveLoginInformation(loginInformation);            LoginInformation gotLoginInformationFromDB = loginService.getLoginInformation("test--1");            System.out.println("from DB login information: \n"+gotLoginInformationFromDB);            Assertions.assertEquals(loginInformation.getUsername(),gotLoginInformationFromDB.getUsername());            Assertions.assertEquals(loginInformation.getPassword(),gotLoginInformationFromDB.getPassword());            Assertions.assertEquals(loginInformation.getRole(),gotLoginInformationFromDB.getRole());        }catch (ResourceAlreadyExistException | ResourceDoesNotExistException e){            e.printStackTrace();        }    }    @Test    public void updateLoginInformation() {        try {            LoginInformation loginInformation = new LoginInformation();            loginInformation.setUsername("test--1");            loginInformation.setPassword("test12345");            loginInformation.setRole(Role.Admin);            LoginInformation savedloginInformation = loginService.saveLoginInformation(loginInformation);            System.out.println("Before Update : \n"+savedloginInformation);            loginInformation.setPassword("joniyed12345");            loginInformation.setRole(Role.Manager);            LoginInformation updatedInformation = loginService.updateLoginInformation("test--1", loginInformation);            System.out.println("Updated information: \n"+updatedInformation);            Assertions.assertEquals(loginInformation.getUsername(),updatedInformation.getUsername());            Assertions.assertEquals(loginInformation.getPassword(),updatedInformation.getPassword());            Assertions.assertEquals(loginInformation.getRole(),updatedInformation.getRole());        }catch (ResourceAlreadyExistException | ResourceDoesNotExistException e){            e.printStackTrace();        }    }    @Test    public void deleteLoginInformation() {        try {            LoginInformation loginInformation = new LoginInformation();            loginInformation.setUsername("test--1");            loginInformation.setPassword("test12345");            loginInformation.setRole(Role.Admin);            System.out.println(loginInformation);            loginService.saveLoginInformation(loginInformation);            loginInformation.setUsername("test--2");            loginInformation.setPassword("joniyed12345");            loginInformation.setRole(Role.Manager);            System.out.println(loginInformation);            loginService.saveLoginInformation(loginInformation);            loginService.deleteLoginInformation("test--1");            System.out.println("After delete test--1");            loginRepository.findAll().forEach(System.out::println);        }catch (ResourceAlreadyExistException | ResourceDoesNotExistException e){            e.printStackTrace();        }    }}